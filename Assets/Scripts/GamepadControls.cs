//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.1
//     from Assets/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GamepadControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GamepadControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""ceb48719-b664-4442-b0c7-d2b4d24d58a9"",
            ""actions"": [
                {
                    ""name"": ""ACmovement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""286b220f-5f12-48f1-8b9e-91bf7b641e43"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""StickDeadzone"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""moveCam"",
                    ""type"": ""PassThrough"",
                    ""id"": ""781357ee-8172-4e5f-a50f-a7e53e5aa84a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""StickDeadzone"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ACyaw"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f54342a2-601c-417c-9046-e5bc8d4aebc4"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ACthrottle"",
                    ""type"": ""Value"",
                    ""id"": ""636f1987-e23c-410a-bf20-f560c1dd3d94"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""toggleCam"",
                    ""type"": ""Button"",
                    ""id"": ""89bb7773-d740-4aa4-b431-6fbebe6884e9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ACfireMSL"",
                    ""type"": ""Button"",
                    ""id"": ""8314f0b9-281f-4709-b34b-62342160d141"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ACfireGUN"",
                    ""type"": ""Button"",
                    ""id"": ""f49f20d4-9ccb-498e-a727-9218457d9f40"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ACcycleTgt"",
                    ""type"": ""Button"",
                    ""id"": ""1d0b1c9c-a45a-4500-885a-a62be71b3d16"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Tap,Hold"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ca8993c0-8f24-4de5-827b-35d7adbabdbc"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";DualStickController"",
                    ""action"": ""ACmovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""23e8e495-2180-4bb6-aa19-bcfc71722035"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";DualStickController"",
                    ""action"": ""moveCam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""bf7f4f1b-a769-455a-a174-62a402be7032"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ACyaw"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""2be54c3d-1a8d-4b6c-bcf3-6cc26d729b96"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";DualStickController"",
                    ""action"": ""ACyaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""1dd4ec88-97a8-4b6f-bf44-6c4350590ee6"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";DualStickController"",
                    ""action"": ""ACyaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""778b41d3-19c1-4fcf-8e00-1dd1ed0d79bd"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ACthrottle"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""346aec30-0af4-4d44-ae71-0322ebae49ef"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";DualStickController"",
                    ""action"": ""ACthrottle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f78bcf33-7076-426f-85df-eef1306a0ddb"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";DualStickController"",
                    ""action"": ""ACthrottle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c10fbac4-b85f-46f1-91ca-75e2dbfa7619"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";DualStickController"",
                    ""action"": ""toggleCam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c471bfc8-affa-472b-94e3-f5f483f4f992"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";DualStickController"",
                    ""action"": ""ACfireMSL"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a25669f7-2a9d-4e80-9404-201131947dec"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";DualStickController"",
                    ""action"": ""ACfireGUN"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d367b4e7-6ec1-4dc8-bfca-ddca67a1ec7f"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";DualStickController"",
                    ""action"": ""ACcycleTgt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""26e2c436-5613-4f0b-ac76-321d4e4108a1"",
            ""actions"": [
                {
                    ""name"": ""Navigate"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f2721d48-f9a5-4e49-960b-f21b324b6ae3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""50d7781d-7ef3-4e95-80cc-dfdd74206019"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""385735c5-3cbd-48fa-8fce-269b0845dc4b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Start"",
                    ""type"": ""Button"",
                    ""id"": ""c474b1ef-55c4-4b4f-b621-9cfe12b9e3ea"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6dc4de6d-4131-407d-8c6f-f80b7668e992"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";DualStickController"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""53be3420-c9ee-48c2-958d-2b90abaeb3c6"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";DualStickController"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""54c5b609-26a4-46fd-8240-0d2d13cee029"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";DualStickController"",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""25901049-1923-4ed0-afe4-1d986264fa90"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";DualStickController"",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9286ea06-1e4d-479e-a2ba-2910bd3415d3"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";DualStickController"",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""DualStickController"",
            ""bindingGroup"": ""DualStickController"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""KB&M"",
            ""bindingGroup"": ""KB&M"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_ACmovement = m_Gameplay.FindAction("ACmovement", throwIfNotFound: true);
        m_Gameplay_moveCam = m_Gameplay.FindAction("moveCam", throwIfNotFound: true);
        m_Gameplay_ACyaw = m_Gameplay.FindAction("ACyaw", throwIfNotFound: true);
        m_Gameplay_ACthrottle = m_Gameplay.FindAction("ACthrottle", throwIfNotFound: true);
        m_Gameplay_toggleCam = m_Gameplay.FindAction("toggleCam", throwIfNotFound: true);
        m_Gameplay_ACfireMSL = m_Gameplay.FindAction("ACfireMSL", throwIfNotFound: true);
        m_Gameplay_ACfireGUN = m_Gameplay.FindAction("ACfireGUN", throwIfNotFound: true);
        m_Gameplay_ACcycleTgt = m_Gameplay.FindAction("ACcycleTgt", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Navigate = m_UI.FindAction("Navigate", throwIfNotFound: true);
        m_UI_Submit = m_UI.FindAction("Submit", throwIfNotFound: true);
        m_UI_Cancel = m_UI.FindAction("Cancel", throwIfNotFound: true);
        m_UI_Start = m_UI.FindAction("Start", throwIfNotFound: true);
    }

    ~@GamepadControls()
    {
        UnityEngine.Debug.Assert(!m_Gameplay.enabled, "This will cause a leak and performance issues, GamepadControls.Gameplay.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_UI.enabled, "This will cause a leak and performance issues, GamepadControls.UI.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_ACmovement;
    private readonly InputAction m_Gameplay_moveCam;
    private readonly InputAction m_Gameplay_ACyaw;
    private readonly InputAction m_Gameplay_ACthrottle;
    private readonly InputAction m_Gameplay_toggleCam;
    private readonly InputAction m_Gameplay_ACfireMSL;
    private readonly InputAction m_Gameplay_ACfireGUN;
    private readonly InputAction m_Gameplay_ACcycleTgt;
    public struct GameplayActions
    {
        private @GamepadControls m_Wrapper;
        public GameplayActions(@GamepadControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ACmovement => m_Wrapper.m_Gameplay_ACmovement;
        public InputAction @moveCam => m_Wrapper.m_Gameplay_moveCam;
        public InputAction @ACyaw => m_Wrapper.m_Gameplay_ACyaw;
        public InputAction @ACthrottle => m_Wrapper.m_Gameplay_ACthrottle;
        public InputAction @toggleCam => m_Wrapper.m_Gameplay_toggleCam;
        public InputAction @ACfireMSL => m_Wrapper.m_Gameplay_ACfireMSL;
        public InputAction @ACfireGUN => m_Wrapper.m_Gameplay_ACfireGUN;
        public InputAction @ACcycleTgt => m_Wrapper.m_Gameplay_ACcycleTgt;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @ACmovement.started += instance.OnACmovement;
            @ACmovement.performed += instance.OnACmovement;
            @ACmovement.canceled += instance.OnACmovement;
            @moveCam.started += instance.OnMoveCam;
            @moveCam.performed += instance.OnMoveCam;
            @moveCam.canceled += instance.OnMoveCam;
            @ACyaw.started += instance.OnACyaw;
            @ACyaw.performed += instance.OnACyaw;
            @ACyaw.canceled += instance.OnACyaw;
            @ACthrottle.started += instance.OnACthrottle;
            @ACthrottle.performed += instance.OnACthrottle;
            @ACthrottle.canceled += instance.OnACthrottle;
            @toggleCam.started += instance.OnToggleCam;
            @toggleCam.performed += instance.OnToggleCam;
            @toggleCam.canceled += instance.OnToggleCam;
            @ACfireMSL.started += instance.OnACfireMSL;
            @ACfireMSL.performed += instance.OnACfireMSL;
            @ACfireMSL.canceled += instance.OnACfireMSL;
            @ACfireGUN.started += instance.OnACfireGUN;
            @ACfireGUN.performed += instance.OnACfireGUN;
            @ACfireGUN.canceled += instance.OnACfireGUN;
            @ACcycleTgt.started += instance.OnACcycleTgt;
            @ACcycleTgt.performed += instance.OnACcycleTgt;
            @ACcycleTgt.canceled += instance.OnACcycleTgt;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @ACmovement.started -= instance.OnACmovement;
            @ACmovement.performed -= instance.OnACmovement;
            @ACmovement.canceled -= instance.OnACmovement;
            @moveCam.started -= instance.OnMoveCam;
            @moveCam.performed -= instance.OnMoveCam;
            @moveCam.canceled -= instance.OnMoveCam;
            @ACyaw.started -= instance.OnACyaw;
            @ACyaw.performed -= instance.OnACyaw;
            @ACyaw.canceled -= instance.OnACyaw;
            @ACthrottle.started -= instance.OnACthrottle;
            @ACthrottle.performed -= instance.OnACthrottle;
            @ACthrottle.canceled -= instance.OnACthrottle;
            @toggleCam.started -= instance.OnToggleCam;
            @toggleCam.performed -= instance.OnToggleCam;
            @toggleCam.canceled -= instance.OnToggleCam;
            @ACfireMSL.started -= instance.OnACfireMSL;
            @ACfireMSL.performed -= instance.OnACfireMSL;
            @ACfireMSL.canceled -= instance.OnACfireMSL;
            @ACfireGUN.started -= instance.OnACfireGUN;
            @ACfireGUN.performed -= instance.OnACfireGUN;
            @ACfireGUN.canceled -= instance.OnACfireGUN;
            @ACcycleTgt.started -= instance.OnACcycleTgt;
            @ACcycleTgt.performed -= instance.OnACcycleTgt;
            @ACcycleTgt.canceled -= instance.OnACcycleTgt;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_Navigate;
    private readonly InputAction m_UI_Submit;
    private readonly InputAction m_UI_Cancel;
    private readonly InputAction m_UI_Start;
    public struct UIActions
    {
        private @GamepadControls m_Wrapper;
        public UIActions(@GamepadControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Navigate => m_Wrapper.m_UI_Navigate;
        public InputAction @Submit => m_Wrapper.m_UI_Submit;
        public InputAction @Cancel => m_Wrapper.m_UI_Cancel;
        public InputAction @Start => m_Wrapper.m_UI_Start;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @Navigate.started += instance.OnNavigate;
            @Navigate.performed += instance.OnNavigate;
            @Navigate.canceled += instance.OnNavigate;
            @Submit.started += instance.OnSubmit;
            @Submit.performed += instance.OnSubmit;
            @Submit.canceled += instance.OnSubmit;
            @Cancel.started += instance.OnCancel;
            @Cancel.performed += instance.OnCancel;
            @Cancel.canceled += instance.OnCancel;
            @Start.started += instance.OnStart;
            @Start.performed += instance.OnStart;
            @Start.canceled += instance.OnStart;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @Navigate.started -= instance.OnNavigate;
            @Navigate.performed -= instance.OnNavigate;
            @Navigate.canceled -= instance.OnNavigate;
            @Submit.started -= instance.OnSubmit;
            @Submit.performed -= instance.OnSubmit;
            @Submit.canceled -= instance.OnSubmit;
            @Cancel.started -= instance.OnCancel;
            @Cancel.performed -= instance.OnCancel;
            @Cancel.canceled -= instance.OnCancel;
            @Start.started -= instance.OnStart;
            @Start.performed -= instance.OnStart;
            @Start.canceled -= instance.OnStart;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    private int m_DualStickControllerSchemeIndex = -1;
    public InputControlScheme DualStickControllerScheme
    {
        get
        {
            if (m_DualStickControllerSchemeIndex == -1) m_DualStickControllerSchemeIndex = asset.FindControlSchemeIndex("DualStickController");
            return asset.controlSchemes[m_DualStickControllerSchemeIndex];
        }
    }
    private int m_KBMSchemeIndex = -1;
    public InputControlScheme KBMScheme
    {
        get
        {
            if (m_KBMSchemeIndex == -1) m_KBMSchemeIndex = asset.FindControlSchemeIndex("KB&M");
            return asset.controlSchemes[m_KBMSchemeIndex];
        }
    }
    public interface IGameplayActions
    {
        void OnACmovement(InputAction.CallbackContext context);
        void OnMoveCam(InputAction.CallbackContext context);
        void OnACyaw(InputAction.CallbackContext context);
        void OnACthrottle(InputAction.CallbackContext context);
        void OnToggleCam(InputAction.CallbackContext context);
        void OnACfireMSL(InputAction.CallbackContext context);
        void OnACfireGUN(InputAction.CallbackContext context);
        void OnACcycleTgt(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnNavigate(InputAction.CallbackContext context);
        void OnSubmit(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
        void OnStart(InputAction.CallbackContext context);
    }
}
